{"version":3,"sources":["images/background2.jpg","App.js","reportWebVitals.js","index.js"],"names":["BearTrend","props","id","undefined","longestBear","Volume","topVolumeDate","topVolume","BuyAndSell","buyDate","sellDate","App","useState","start","setStart","end","setEnd","setLongestBear","setTopVolumeDate","setTopVolume","setBuyDate","setSellDate","processAPIdata","json","prices","volumes","dates","getDatesInRange","date","pricepoint","find","p","matchingDate","unix2date","push","volumepoint","total_volumes","v","cryptoData","console","log","nOfDays","Date","getTime","prevDate","i","newDate","setDate","getDate","first","last","getUTCFullYear","getUTCMonth","getUTCDate","maxProfit","bestBuy","bestSell","profit","length","currentBuy","j","currentSell","toDateString","calcLongestBearTrend","currentTrend","longestTrend","highestVolume","highest","Math","round","date2unixDate","unix","className","style","backgroundImage","background","backgroundSize","margin","opacity","onSubmit","e","preventDefault","sdate","edate","url","fetch","then","res","type","onChange","target","value","required","max","now","toISOString","split","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e11157fc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background2.4062aecc.jpg\";","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport background from \"./images/background2.jpg\";\n\nfunction App() {\n  const [start, setStart] = useState(); //user-input start date\n  const [end, setEnd] = useState(); //user-input end date\n\n  const [longestBear, setLongestBear] = useState(); // the longest down-trend\n  const [topVolumeDate, setTopVolumeDate] = useState(); // date of the top volume\n  const [topVolume, setTopVolume] = useState(); // top volume in euros\n  const [buyDate, setBuyDate] = useState(); // suggested date to buy in the range\n  const [sellDate, setSellDate] = useState(); // suggested date to sell in the range\n\n  // when form is submitted, this function makes a query to the API based on selected dates\n  // & calls functions to process the data\n  const makeCoinGeckoQuery = (e) => {\n    e.preventDefault();\n    const sdate = date2unixDate(start);\n    const edate = date2unixDate(end) + 3600;\n    const url = `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=${sdate}&to=${edate}`;\n    fetch(url)\n      .then((res) => res.json())\n      .then((json) => {\n        let cryptoData = processAPIdata(json);\n        calcLongestBearTrend(cryptoData.prices);\n        highestVolume(cryptoData.volumes);\n        maxProfit(cryptoData.prices);\n      });\n  };\n\n  //processes the data to a more usable form: changes UNIX-times to Date objects &\n  //transforms the data granularity to the desired level (closest datapoint after 00:00 UTC for each day)\n  const processAPIdata = (json) => {\n    let prices = [];\n    let volumes = [];\n    let dates = getDatesInRange();\n\n    //finds the closest datapoint to 00:00 UTC for each date in the range\n    for (let date of dates) {\n      let pricepoint = json.prices.find((p) => {\n        return matchingDate(date, unix2date(p[0]));\n      });\n      prices.push([unix2date(pricepoint[0]), pricepoint[1]]);\n\n      let volumepoint = json.total_volumes.find((v) => {\n        return matchingDate(date, unix2date(v[0]));\n      });\n      volumes.push([unix2date(volumepoint[0]), volumepoint[1]]);\n    }\n\n    let cryptoData = { prices: prices, volumes: volumes };\n\n    console.log(cryptoData);\n    console.log(\"obj!!!\");\n\n    return cryptoData;\n  };\n\n  /**\n   * returns an array of all dates in the set date-range\n   */\n  const getDatesInRange = () => {\n    let nOfDays =\n      (new Date(end).getTime() - new Date(start).getTime()) /\n      (1000 * 3600 * 24);\n    let prevDate = new Date(start);\n    let dates = [new Date(start)];\n    for (let i = 0; i < nOfDays; i++) {\n      let newDate = new Date(prevDate);\n      newDate.setDate(newDate.getDate() + 1);\n      dates.push(newDate);\n      prevDate = newDate;\n    }\n    return dates;\n  };\n\n  /**\n   * the compare-function checks if two date-objects have the same year, month, and day in UTC time\n   */\n  const matchingDate = (first, last) => {\n    return (\n      first.getUTCFullYear() === last.getUTCFullYear() &&\n      first.getUTCMonth() === last.getUTCMonth() &&\n      first.getUTCDate() === last.getUTCDate()\n    );\n  };\n\n  /**\n   * determines the best days to buy & sell in the date-range\n   */\n  const maxProfit = (prices) => {\n    let profit = 0;\n    let bestBuy;\n    let bestSell;\n\n    for (let i = 0; i < prices.length; i++) {\n      let currentBuy = prices[i][1];\n      for (let j = i + 1; j < prices.length; j++) {\n        let currentSell = prices[j][1];\n        if (currentSell - currentBuy > profit) {\n          profit = currentSell - currentBuy;\n          bestBuy = prices[i][0];\n          bestSell = prices[j][0];\n        }\n      }\n    }\n\n    if ((bestBuy === undefined && bestSell === undefined) || profit === 0) {\n      setBuyDate(\"DON'T BUY!\");\n      setSellDate(\"DON'T SELL!\");\n      return;\n    }\n\n    setBuyDate(bestBuy.toDateString());\n    setSellDate(bestSell.toDateString());\n  };\n\n  /**\n   * calculates the length of the longest consecutive downward price trend in the range\n   */\n  const calcLongestBearTrend = (prices) => {\n    let currentTrend = []; //keeps track of the trend being calculated\n    let longestTrend = []; //the longest found trend\n\n    for (let i = 1; i < prices.length; i++) {\n      if (prices[i][1] < prices[i - 1][1]) {\n        currentTrend.push(prices[i]);\n\n        if (currentTrend.length > longestTrend.length) {\n          longestTrend = currentTrend;\n        }\n      } else {\n        currentTrend = [];\n      }\n    }\n    setLongestBear(longestTrend.length);\n  };\n\n  /**\n   *\n   */\n  const highestVolume = (volumes) => {\n    let highest = volumes[0];\n    for (let i = 1; i < volumes.length; i++) {\n      if (volumes[i][1] > highest[1]) highest = volumes[i];\n    }\n    setTopVolume(Math.round(highest[1]));\n    setTopVolumeDate(unix2date(highest[0]).toDateString());\n  };\n\n  //transforms a Date object to an UNIX timestamp\n  const date2unixDate = (date) => {\n    const asDate = new Date(\"\" + date);\n    return asDate.getTime() / 1000;\n  };\n  //transforms an UNIX timestamp to a Date object\n  const unix2date = (unix) => {\n    return new Date(unix);\n  };\n\n  return (\n    <div\n      className=\"App\"\n      id=\"app\"\n      style={{\n        backgroundImage: `url(${background})`,\n        backgroundSize: \"70% 100%\",\n        margin: \"0\",\n        opacity: \"0.9\",\n      }}\n    >\n      <form onSubmit={makeCoinGeckoQuery}>\n        <h2>Pick a start and an end date</h2>\n        <label>\n          Start{\" \"}\n          <input\n            type=\"date\"\n            id=\"start\"\n            onChange={(e) => setStart(e.target.value)}\n            required=\"required\"\n            max={new Date(Date.now() - 86400000).toISOString().split(\"T\")[0]}\n          ></input>\n        </label>\n        <label>\n          End{\" \"}\n          <input\n            type=\"date\"\n            id=\"start\"\n            onChange={(e) => setEnd(e.target.value)}\n            required=\"required\"\n            max={new Date().toISOString().split(\"T\")[0]}\n          ></input>\n        </label>\n        <button type=\"submit\">Make query</button>\n      </form>\n      <BearTrend longestBear={longestBear} />\n      <Volume topVolume={topVolume} topVolumeDate={topVolumeDate} />\n      <BuyAndSell buyDate={buyDate} sellDate={sellDate} />\n    </div>\n  );\n}\n\nfunction BearTrend(props) {\n  return (\n    <div id=\"bear\">\n      {props.longestBear !== undefined && (\n        <div>\n          <h2>Bear data</h2>\n          <p>\n            Longest bearish trend in the date range was {props.longestBear} days\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction Volume(props) {\n  return (\n    <div id=\"volume\">\n      {props.topVolumeDate !== undefined && props.topVolume !== undefined && (\n        <div>\n          <h2>Highest trading volume</h2>\n          <p>\n            The highest trading volume in the date range was on{\" \"}\n            {props.topVolumeDate} with a total trading volume of{\" \"}\n            {props.topVolume} euros\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction BuyAndSell(props) {\n  return (\n    <div id=\"timetravel\">\n      {props.buyDate !== undefined && props.sellDate !== undefined && (\n        <div>\n          <h2>Instructions for Scrooge's time travel adventure</h2>\n          <p>\n            <b>Buy:</b> {props.buyDate} <b>Sell:</b> {props.sellDate}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}