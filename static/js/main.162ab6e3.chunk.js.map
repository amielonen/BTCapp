{"version":3,"sources":["images/background2.jpg","App.js","reportWebVitals.js","index.js"],"names":["BearTrend","longestBear","id","undefined","Volume","topVolumeDate","topVolume","BuyAndSell","buyDate","sellDate","App","amount","useState","start","setStart","end","setEnd","setLongestBear","setTopVolumeDate","setTopVolume","setBuyDate","setSellDate","dataInconsistencies","setDataInconsistencies","processAPIdata","json","prices","volumes","dates","getDatesInRange","date","pricepoint","find","p","matchingDate","unix2date","push","volumepoint","total_volumes","v","length","nOfDays","Date","getTime","prevDate","i","newDate","setDate","getDate","first","last","getUTCFullYear","getUTCMonth","getUTCDate","maxProfit","bestBuy","bestSell","profit","currentBuy","j","currentSell","toDateString","calcLongestBearTrend","currentTrend","longestTrend","highestVolume","highest","date2unixDate","unix","className","style","backgroundImage","background","backgroundSize","margin","onSubmit","e","preventDefault","sdate","edate","url","fetch","then","res","status","Error","statusText","cryptoData","catch","error","alert","message","type","onChange","target","value","required","max","now","toISOString","split","Intl","NumberFormat","currency","format","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.162ab6e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background2.4062aecc.jpg\";","import React, { useState } from \"react\"\nimport \"./App.css\"\nimport background from \"./images/background2.jpg\"\n\nfunction App() {\n  const [start, setStart] = useState() //user-input start date\n  const [end, setEnd] = useState() //user-input end date\n\n  const [longestBear, setLongestBear] = useState() // the longest down-trend\n  const [topVolumeDate, setTopVolumeDate] = useState() // date of the top volume\n  const [topVolume, setTopVolume] = useState() // top volume in euros\n  const [buyDate, setBuyDate] = useState() // suggested date to buy in the range\n  const [sellDate, setSellDate] = useState() // suggested date to sell in the range\n  const [dataInconsistencies, setDataInconsistencies] = useState(false) // if the API doesn't provide a datapoint for each date in the range, the user is notified\n\n  // when form is submitted, this function makes a query to the API based on selected dates\n  // & calls functions to process the data\n  const makeCoinGeckoQuery = e => {\n    e.preventDefault()\n    const sdate = date2unixDate(start)\n    const edate = date2unixDate(end) + 3600\n    const url = `https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/range?vs_currency=eur&from=${sdate}&to=${edate}`\n    fetch(url)\n      .then(res => {\n        if (res.status >= 200 && res.status <= 299) {\n          return res.json()\n        } else {\n          throw Error(res.statusText)\n        }\n      })\n      .then(json => {\n        let cryptoData = processAPIdata(json)\n        calcLongestBearTrend(cryptoData.prices)\n        highestVolume(cryptoData.volumes)\n        maxProfit(cryptoData.prices)\n      })\n      .catch(error => {\n        alert(error.message)\n      })\n  }\n\n  //processes the data to a more usable form: changes UNIX-times to Date objects &\n  //transforms the data granularity to the desired level (closest datapoint after 00:00 UTC for each day)\n  const processAPIdata = json => {\n    let prices = []\n    let volumes = []\n    let dates = getDatesInRange()\n\n    //finds the closest datapoint to 00:00 UTC for each date in the range\n    for (let date of dates) {\n      let pricepoint = json.prices.find(p => {\n        return matchingDate(date, unix2date(p[0]))\n      })\n      prices.push([unix2date(pricepoint[0]), pricepoint[1]])\n\n      let volumepoint = json.total_volumes.find(v => {\n        return matchingDate(date, unix2date(v[0]))\n      })\n      volumes.push([unix2date(volumepoint[0]), volumepoint[1]])\n    }\n\n    if (prices.length !== dates.length) {\n      setDataInconsistencies(true)\n    }\n\n    return { prices: prices, volumes: volumes }\n  }\n\n  /**\n   * returns an array of all dates in the set date-range\n   */\n  const getDatesInRange = () => {\n    let nOfDays =\n      (new Date(end).getTime() - new Date(start).getTime()) /\n      (1000 * 3600 * 24)\n    let prevDate = new Date(start)\n    let dates = [new Date(start)]\n    for (let i = 0; i < nOfDays; i++) {\n      let newDate = new Date(prevDate)\n      newDate.setDate(newDate.getDate() + 1)\n      dates.push(newDate)\n      prevDate = newDate\n    }\n    return dates\n  }\n\n  /**\n   * the compare-function checks if two date-objects have the same year, month, and day in UTC time\n   */\n  const matchingDate = (first, last) => {\n    return (\n      first.getUTCFullYear() === last.getUTCFullYear() &&\n      first.getUTCMonth() === last.getUTCMonth() &&\n      first.getUTCDate() === last.getUTCDate()\n    )\n  }\n\n  /**\n   * determines the best days to buy & sell in the date-range\n   */\n  const maxProfit = (prices) => {\n    let profit = 0\n    let bestBuy\n    let bestSell\n\n    for (let i = 0; i < prices.length; i++) {\n      let currentBuy = prices[i][1]\n      for (let j = i + 1; j < prices.length; j++) {\n        let currentSell = prices[j][1]\n        if (currentSell - currentBuy > profit) {\n          profit = currentSell - currentBuy\n          bestBuy = prices[i][0]\n          bestSell = prices[j][0]\n        }\n      }\n    }\n\n    if (bestBuy === undefined || bestSell === undefined || profit === 0) {\n      setBuyDate(\"DON'T BUY!\")\n      setSellDate(\"DON'T SELL!\")\n      return\n    }\n\n    setBuyDate(bestBuy.toDateString())\n    setSellDate(bestSell.toDateString())\n  }\n\n  /**\n   * calculates the length of the longest consecutive downward price trend in the range\n   */\n  const calcLongestBearTrend = (prices) => {\n    let currentTrend = [] //keeps track of the trend being calculated\n    let longestTrend = [] //the longest found trend\n\n    for (let i = 1; i < prices.length; i++) {\n      if (prices[i][1] < prices[i - 1][1]) {\n        currentTrend.push(prices[i])\n\n        if (currentTrend.length > longestTrend.length) {\n          longestTrend = currentTrend\n        }\n      } else {\n        currentTrend = []\n      }\n    }\n    setLongestBear(longestTrend.length)\n  }\n\n  /**\n   * Finds the date with highest volume in the given range\n   */\n  const highestVolume = (volumes) => {\n    let highest = volumes[0]\n    for (let i = 1; i < volumes.length; i++) {\n      if (volumes[i][1] > highest[1]) highest = volumes[i]\n    }\n    setTopVolume(highest[1])\n    setTopVolumeDate(unix2date(highest[0]).toDateString())\n  }\n\n  //transforms a Date object to an UNIX timestamp\n  const date2unixDate = (date) => {\n    const asDate = new Date(\"\" + date)\n    return asDate.getTime() / 1000\n  }\n\n  //transforms an UNIX timestamp to a Date object\n  const unix2date = (unix) => {\n    return new Date(unix)\n  }\n\n  // converts an amount in euros to a grammatically correct string \n  const euroString = (amount) => {\n    let formatter = new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"EUR\",\n    })\n\n    return formatter.format(amount)\n  }\n\n  return (\n    <div\n      className=\"App\"\n      id=\"app\"\n      style={{\n        backgroundImage: `url(${background})`,\n        backgroundSize: \"70% 100%\",\n        margin: \"0\",\n      }}\n    >\n      <form onSubmit={makeCoinGeckoQuery}>\n        <h2>Pick a start and an end date</h2>\n        <div id=\"dateform\">\n          <div>\n            <label>\n              Start\n              <input\n                type=\"date\"\n                id=\"start\"\n                onChange={(e) => setStart(e.target.value)}\n                required=\"required\"\n                max={\n                  new Date(Date.now() - 86400000).toISOString().split(\"T\")[0]\n                }\n              ></input>\n            </label>\n            <label>\n              End\n              <input\n                type=\"date\"\n                id=\"start\"\n                onChange={(e) => setEnd(e.target.value)}\n                required=\"required\"\n                max={new Date().toISOString().split(\"T\")[0]}\n              ></input>\n            </label>\n            <button type=\"submit\">Make query</button>\n          </div>\n        </div>\n      </form>\n      {dataInconsistencies && <p>The price data is missing some datapoints</p>}\n      <BearTrend longestBear={longestBear} />\n      <Volume topVolume={euroString(topVolume)} topVolumeDate={topVolumeDate} />\n      <BuyAndSell buyDate={buyDate} sellDate={sellDate} />\n    </div>\n  )\n}\n\nfunction BearTrend({ longestBear }) {\n  return (\n    <div id=\"bear\">\n      {longestBear !== undefined && (\n        <div>\n          <h2>Bear data</h2>\n          <p>Longest bearish trend in the date range was {longestBear} days</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction Volume({ topVolumeDate, topVolume }) {\n  return (\n    <div id=\"volume\">\n      {topVolumeDate !== undefined && topVolume !== undefined && (\n        <div>\n          <h2>Highest trading volume</h2>\n          <p>\n            The highest trading volume in the date range was on {topVolumeDate}{\" \"}\n            with a total trading volume of {topVolume}\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction BuyAndSell({ buyDate, sellDate }) {\n  return (\n    <div id=\"timetravel\">\n      {buyDate !== undefined && sellDate !== undefined && (\n        <div>\n          <h2>Instructions for Scrooge's time travel adventure</h2>\n          <p>\n            <b>Buy:</b> {buyDate} <b>Sell:</b> {sellDate}\n          </p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}